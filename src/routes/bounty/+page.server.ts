import { DefaultProvider, bsv } from 'scrypt-ts';
import { Root } from '../../contracts/root';
import { NeucronSigner } from 'neucron-signer';
import type { Actions } from './$types'; // Ensure $types is generated by SvelteKit
import artifact from "../../../artifacts/root.json";

const provider = new DefaultProvider({ network: bsv.Networks.mainnet });
const signer = new NeucronSigner(provider);

let instance: Root | null = null;

export const actions: Actions = {
  bountydeploy: async ({ request }) => {
    const data = await request.formData();
    const email = data.get('email') as string;
    const password = data.get('password') as string;
    const amount = parseInt(data.get('amount') as string);
    const square = BigInt(data.get('square') as string);

    try {
      await signer.login(email, password);
    } catch (loginError) {
      return { deploysuccess: false, txid: null, error: 'login' };
    }

    try {
      await Root.loadArtifact(artifact);

      instance = new Root(square);
      await instance.connect(signer);

      const deployTx = await instance.deploy(amount);
      return { deploysuccess: true, txid: deployTx.id };
    } catch (error) {
      return { deploysuccess: false, txid: null };
    }
  },

  bountyunlock: async ({ request }) => {
    const data = await request.formData();
    const root = parseInt(data.get('root') as string);

    if (!instance) {
      return { unlocksuccess: false, txid: null };
    }

    try {
      await new Promise((resolve) => setTimeout(resolve, 5000));
      const { tx: callTx } = await instance.methods.unlock(root);
      return { unlocksuccess: true, txid: callTx.id };
    } catch (error) {
      return { unlocksuccess: false, txid: null };
    }
  }
};
