import { DefaultProvider, bsv } from 'scrypt-ts';
import { Root } from '../../contracts/root';
import { NeucronSigner } from 'neucron-signer';
import type { Actions } from './$types'; // Ensure $types is generated by SvelteKit
import artifact from "../../../artifacts/root.json"

const provider = new DefaultProvider({ network: bsv.Networks.mainnet });
const signer = new NeucronSigner(provider);

let instance: Root | null = null;

export const actions: Actions = {
    bountydeploy: async ({ request }) => {
        const data = await request.formData();
        const email = data.get('email') as string;
        const password = data.get('password') as string;
        const amount = parseInt(data.get('amount') as string);
        const square = BigInt(data.get('square') as string);

        await signer.login(email, password);
        await Root.loadArtifact(artifact);

        instance = new Root(square);
        await instance.connect(signer);

        try {
            const deployTx = await instance.deploy(amount);
            console.log('smart lock deployed : https://whatsonchain.com/tx/' + deployTx.id);
            return { deploysuccess: true, txid: deployTx.id };
        } catch (error) {
            console.error('Deployment failed:', error);
            return { deploysuccess: false, txid: null };
        }
    },

    bountyunlock: async ({ request }) => {
        const data = await request.formData();
        const root = parseInt(data.get('root') as string);

        if (!instance) {
            console.error('Instance not found. Deploy the contract first.');
            return { unlocksuccess: false, txid: null };
        }

        try {
            await new Promise((resolve) => setTimeout(resolve, 5000));
            const { tx: callTx } = await instance.methods.unlock(root);
            console.log('contract unlocked successfully : https://whatsonchain.com/tx/' + callTx.id);
            return { unlocksuccess: true, txid: callTx.id };
        } catch (error) {
            console.error('Unlocking failed:', error);
            return { unlocksuccess: false, txid: null };
        }
    }
};
